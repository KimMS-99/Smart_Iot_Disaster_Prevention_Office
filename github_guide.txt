======================================================================
   GitHub와 Git LFS를 처음 사용하는 분들을 위한 종합 가이드
======================================================================

이 문서는 Git과 GitHub를 처음 접하는 분들을 위해 만들어졌습니다.
로컬 PC에 Git을 설치하는 것부터, GitHub에 코드를 올리고, Git LFS를 사용해
대용량 파일을 관리하는 방법, 그리고 협업을 위한 브랜치 사용법까지 모든 과정을
단계별로 설명합니다.

----------------------------------------------------------------------
### 목차
----------------------------------------------------------------------

1. 기본 개념: Git, GitHub, 원격 저장소란?
2. 최초 설정 (PC에서 딱 한 번만 하면 되는 작업)
   - Git 설치하기
   - Git에 내 정보 등록하기
   - GitHub 개인용 액세스 토큰(PAT) 발급 및 사용 이유
3. 새로운 프로젝트 시작하기 (GitHub에 내 코드 올리기)
   - GitHub에 새로운 원격 저장소 만들기
   - 내 PC의 프로젝트 폴더와 원격 저장소 연결하기
   - 첫 코드(파일) 올리기 (add -> commit -> push)
4. Git LFS로 대용량 파일 관리하기
   - Git LFS란 무엇이고 왜 필요한가?
   - Git LFS 최초 설정 (프로젝트에서 딱 한 번)
   - 평소에 대용량 파일 올리는 방법 (결론: 똑같다)
5. 협업을 위한 브랜치(Branch) 사용하기
   - 브랜치란 무엇이고 왜 사용하는가?
   - 브랜치 기본 사용법 (생성, 이동, 병합, 삭제)
   - 협업 시나리오 예시 (기능 개발부터 합치기까지)
6. 고급 Git 및 Git LFS 활용
   - `git lfs push --all origin`은 언제 사용하나요?
   - 기존 GitHub 저장소를 로컬 내용으로 완전히 덮어쓰기
   - Git LFS 관련 일반적인 오류 및 해결 방법
   - Git Push/Pull 시 자주 발생하는 오류 및 해결 방법
7. 알아두면 좋은 추가 정보
   - .gitignore (버전 관리에서 제외할 파일 지정하기)
   - git status (내 작업 현황 확인하기)
   - git pull (원격 저장소의 최신 변경사항 받아오기)

----------------------------------------------------------------------
### 1. 기본 개념: Git, GitHub, 원격 저장소란?
----------------------------------------------------------------------

- **Git**: '버전 관리 시스템'입니다. 코드나 파일이 변경된 이력(버전)을 스냅샷처럼 찍어서 기록하고, 원하는 시점의 버전으로 되돌아갈 수 있게 해주는 프로그램입니다. 내 컴퓨터(로컬)에 설치해서 사용합니다.

- **GitHub**: Git으로 관리하는 프로젝트들을 올려두고 다른 사람과 공유하거나, 여러 PC에서 함께 작업할 수 있게 해주는 '웹 서비스'입니다. Git으로 기록한 버전들을 저장하는 클라우드 서버라고 생각하면 쉽습니다.

- **로컬 저장소 (Local Repository)**: 내 PC에 있는 프로젝트 폴더. Git이 이 폴더를 관리합니다.
- **원격 저장소 (Remote Repository)**: GitHub에 만들어 둔 프로젝트 저장 공간. 로컬 저장소의 내용을 백업하고 공유하는 중앙 서버 역할을 합니다.

----------------------------------------------------------------------
### 2. 최초 설정 (PC에서 딱 한 번만 하면 되는 작업)
----------------------------------------------------------------------

#### 가. Git 설치하기
- 구글에 'git'을 검색하여 공식 사이트(git-scm.com)에 접속합니다.
- 내 운영체제(Windows, Mac)에 맞는 버전을 다운로드하여 설치합니다. 설치 과정에서는 대부분 기본 옵션을 그대로 두고 'Next'를 눌러 진행하면 됩니다.

#### 나. Git에 내 정보 등록하기
- Git을 설치한 후, 터미널(Mac)이나 Git Bash(Windows)를 열고 아래 명령어를 입력합니다.
- 이 정보는 내가 저장한 코드(커밋)에 "이건 내가 작업했음"이라는 이름표를 붙이는 역할을 합니다.

  ```bash
  git config --global user.name "내 영문 이름"
  git config --global user.email "내 이메일 주소"
  ```

#### 다. GitHub 개인용 액세스 토큰(PAT) 발급 및 사용 이유
- **PAT(Personal Access Token)란?**
  - GitHub에 로그인할 때 비밀번호 대신 사용하는 '특별한 비밀번호'입니다.
  - 기존의 계정 비밀번호 방식은 보안에 취약하여, 현재 GitHub는 PAT 사용을 강력히 권장하고 있습니다.
  - 내 PC의 Git이 GitHub 원격 저장소에 `push` 하거나 `pull` 할 때, "내가 정말 이 계정의 주인이 맞는지" 인증하기 위해 사용됩니다.

- **PAT 발급 방법:**
  1. GitHub에 로그인한 후, 오른쪽 위 프로필 아이콘 클릭 -> Settings
  2. 왼쪽 메뉴 맨 아래 -> Developer settings
  3. 왼쪽 메뉴 -> Personal access tokens -> Tokens (classic)
  4. 'Generate new token' 버튼 클릭 -> 'Generate new token (classic)' 선택
  5. **Note**: 토큰의 용도를 적습니다. (예: 'My MacBook Git Token')
  6. **Expiration**: 토큰의 유효기간을 설정합니다. (보안을 위해 30일, 90일 등을 추천하지만, 'No expiration'도 가능)
  7. **Select scopes**: 토큰에게 부여할 권한을 선택합니다.
     - **`repo`**: (가장 중요) 원격 저장소에 대한 모든 권한을 줍니다. (코드 올리기, 받기 등)
     - **`write:packages`**: (LFS 사용 시 필요)
     - **`read:packages`**: (LFS 사용 시 필요)
     - **`delete:packages`**: (LFS 사용 시 필요)
     - **`gist`**, **`workflow`** 등 필요한 권한을 체크합니다. 처음에는 `repo`만 체크해도 대부분의 작업이 가능합니다.
  8. 'Generate token' 버튼을 누르면 `ghp_...`로 시작하는 긴 문자열의 토큰이 생성됩니다.
  9. **[중요] 이 토큰은 이 창을 벗어나면 다시 볼 수 없으므로, 반드시 안전한 곳(비밀번호 관리자 등)에 즉시 복사해두어야 합니다.**

- **PAT 사용하기 (최초 1회 인증)**
  - 나중에 터미널에서 `git push` 명령을 처음 실행하면 GitHub 사용자 이름과 비밀번호를 물어봅니다.
  - 사용자 이름: 내 GitHub 아이디 입력
  - 비밀번호: **GitHub 계정 비밀번호가 아닌, 방금 발급받은 PAT 토큰 전체를 붙여넣기**
  - 인증에 성공하면, PC가 이 정보를 기억해서(Credential Helper 기능) 다음부터는 자동으로 인증해줍니다.

----------------------------------------------------------------------
### 3. 새로운 프로젝트 시작하기 (GitHub에 내 코드 올리기)
----------------------------------------------------------------------

#### 가. GitHub에 새로운 원격 저장소 만들기
1. GitHub에 로그인 후, 오른쪽 위 '+' 버튼 클릭 -> 'New repository'
2. 'Repository name'에 프로젝트 이름을 적습니다. (예: `mini-project`)
3. 'Public'(공개) 또는 'Private'(비공개)를 선택합니다.
4. **'Add a README file'은 체크하지 않고** 비워둡니다. (로컬에서 만든 프로젝트를 올릴 것이므로)
5. 'Create repository' 버튼을 클릭합니다.

#### 나. 내 PC의 프로젝트 폴더와 원격 저장소 연결하기
- 생성된 원격 저장소 페이지에 나오는 안내문 중 "...or push an existing repository from the command line" 부분을 따라합니다.
- 내 PC의 프로젝트 폴더에서 터미널을 엽니다.

  ```bash
  # 1. 이 폴더를 Git으로 관리 시작! (.git 폴더가 생성됨)
  git init

  # 2. 이 로컬 저장소가 연결할 원격 저장소의 주소를 알려주기
  # (아래 주소는 GitHub에서 생성된 내 저장소 주소로 바꿔야 함)
  git remote add origin https://github.com/내아이디/mini-project.git

  # 3. (선택사항) 기본 브랜치 이름을 'main'으로 설정 (최신 Git 권장사항)
  git branch -M main
  ```

#### 다. 첫 코드(파일) 올리기 (add -> commit -> push)
- 이제 내 프로젝트의 모든 파일을 원격 저장소에 올립니다.

  ```bash
  # 1. 현재 폴더의 모든 파일과 변경사항을 커밋 대기실(스테이징 영역)에 올리기
  git add .

  # 2. "첫 커밋"이라는 메시지와 함께 로컬 저장소에 버전 기록 남기기
  git commit -m "Initial commit"

  # 3. 로컬 저장소의 'main' 브랜치를 원격 저장소 'origin'으로 올리기
  # -u 옵션은 앞으로 이 브랜치가 origin/main을 기본으로 연결하도록 설정하는 것
  git push -u origin main
  ```
- 이제 GitHub 저장소 페이지를 새로고침하면 내 파일들이 올라와 있는 것을 볼 수 있습니다.
- 이후부터는 파일을 수정하고 다시 올릴 때 `git add .` -> `git commit -m "메시지"` -> `git push` 흐름을 반복합니다.

----------------------------------------------------------------------
### 4. Git LFS로 대용량 파일 관리하기
----------------------------------------------------------------------

#### 가. Git LFS란 무엇이고 왜 필요한가?
- Git은 100MB가 넘는 대용량 파일(영상, 이미지, 데이터셋 등)을 관리하는 데 비효율적입니다.
- Git LFS(Large File Storage)는 이런 대용량 파일을 Git 저장소에 직접 저장하는 대신, 가벼운 '포인터(지름길 정보)'만 남기고 실제 파일은 별도의 LFS 서버에 저장하는 기술입니다.
- 이를 통해 Git 저장소의 용량을 가볍게 유지하고, `clone`, `push` 속도를 빠르게 유지할 수 있습니다.

#### 나. Git LFS 최초 설정 (프로젝트에서 딱 한 번)
1. **LFS 프로그램 설치 (PC에 한 번)**
   - Homebrew(Mac): `brew install git-lfs`
   - Windows: git-lfs.github.com 에서 설치 파일 다운로드

2. **LFS 초기화 및 파일 종류 추적 (프로젝트 폴더에서 한 번)**
   - 프로젝트 폴더에서 터미널을 열고 아래 명령어를 실행합니다.

     ```bash
     # 1. 내 PC의 Git에서 LFS를 사용하도록 설정
     git lfs install

     # 2. 앞으로 이 프로젝트에서 어떤 파일을 LFS로 관리할지 '규칙' 정하기
     # 예시: 모든 .mp4 파일과 .pptx 파일을 LFS로 관리하겠다!
     git lfs track "*.mp4"
     git lfs track "*.pptx"
     ```
   - 위 명령을 실행하면 `.gitattributes` 라는 파일이 생성되거나 내용이 업데이트됩니다.
   - 이 파일은 "우리 팀의 LFS 관리 규칙서"이므로, 반드시 Git에 커밋해서 팀원들과 공유해야 합니다.

     ```bash
     # 3. 새로 만들어진 규칙 파일(.gitattributes)을 커밋하기
     git add .gitattributes
     git commit -m "Configure Git LFS for video and presentation files"
     git push
     ```

#### 다. 평소에 대용량 파일 올리는 방법
- **결론: 일반 파일과 100% 똑같습니다.**
- 위에서 `.mp4` 파일을 LFS로 관리하라고 규칙을 정해두었기 때문에, 사용자는 LFS를 전혀 신경 쓸 필요가 없습니다.
- 그냥 평소처럼 `add` -> `commit` -> `push` 하면, Git이 알아서 `.mp4` 파일을 감지하고 LFS 방식으로 업로드합니다.

  ```bash
  # 1. 새로 추가한 영상 파일과 수정한 코드 파일을 한 번에 add
  git add .

  # 2. 커밋
  git commit -m "Add new project video and update main logic"

  # 3. 푸시 (이때 LFS가 알아서 작동함)
  git push
  ```

----------------------------------------------------------------------
### 5. 협업을 위한 브랜치(Branch) 사용하기
----------------------------------------------------------------------

#### 가. 브랜치란 무엇이고 왜 사용하는가?

- **브랜치(Branch)**는 한국어로 '나뭇가지'를 의미합니다. Git에서는 기존 개발 흐름(가지)에서 새로운 가지를 뻗어 나와 독립적인 작업 공간을 만드는 것을 의미합니다.

- **사용 이유 (핵심: 안전한 동시 작업)**
  1. **독립적인 작업 공간 확보**: 여러 명이 동시에 서로 다른 기능을 개발할 때, 각자의 작업이 다른 사람의 작업에 영향을 주지 않도록 격리된 공간을 제공합니다. A가 로그인 기능을, B가 게시판 기능을 만든다고 할 때, 서로의 미완성 코드가 섞이지 않습니다.
  2. **안정적인 버전 관리**: 프로젝트의 중심이 되는 브랜치(주로 `main` 또는 `master`)는 항상 안정적이고 배포 가능한 상태로 유지할 수 있습니다. 새로운 기능은 별도의 브랜치에서 충분히 개발하고 테스트한 후, 안전하다고 판단되면 `main` 브랜치에 합칩니다.
  3. **쉬운 실험과 도전**: 새로운 기능을 추가하거나 기존 코드를 대대적으로 리팩토링할 때, 실패에 대한 부담 없이 마음껏 시도해볼 수 있습니다. 만약 작업이 잘못되면, 해당 브랜치를 그냥 삭제하면 그만입니다. 원래의 `main` 브랜치에는 아무런 영향이 없습니다.

#### 나. 브랜치 기본 사용법

- **`git branch`**: 현재 내 로컬 저장소의 브랜치 목록을 보여줍니다. `*` 표시가 현재 내가 작업 중인 브랜치입니다.
- **`git branch <새 브랜치 이름>`**: 새로운 브랜치를 생성합니다. (예: `git branch feature/login`)
- **`git switch <이동할 브랜치 이름>`**: 다른 브랜치로 작업 공간을 전환합니다. (예: `git switch feature/login`)
  - `git checkout <브랜치 이름>`도 같은 기능을 하지만, 최신 Git에서는 `switch` 사용을 권장합니다.
  - **브랜치 생성과 동시에 이동**: `git switch -c <새 브랜치 이름>`
- **`git merge <합칠 브랜치 이름>`**: 다른 브랜치의 작업 내용을 현재 내가 있는 브랜치로 합칩니다. (예: `main` 브랜치에서 `git merge feature/login`을 실행하면, `feature/login`의 작업 내용이 `main`으로 합쳐집니다.)
- **`git branch -d <삭제할 브랜치 이름>`**: 작업이 끝나고 병합까지 완료된 브랜치를 삭제합니다. (예: `git branch -d feature/login`)

#### 다. 협업 시나리오 예시 (A가 로그인 기능 개발하기)

**상황**: `main` 브랜치는 항상 안정적인 상태를 유지해야 합니다. 팀원 A는 새로운 '로그인 기능'을 개발하는 임무를 받았습니다.

**1. (A의 PC) 기능 개발용 브랜치 생성 및 이동**
   - 먼저, 원격 저장소의 최신 `main` 브랜치 상태를 내 PC로 가져옵니다.
     ```bash
     git switch main
     git pull origin main
     ```
   - '로그인 기능'이라는 뜻의 `feature/login` 브랜치를 새로 만들고, 그 브랜치로 이동해서 작업을 시작합니다.
     ```bash
     git switch -c feature/login
     ```

**2. (A의 PC) 기능 개발 및 푸시**
   - 이제 `feature/login` 브랜치 안에서 자유롭게 코드를 수정하고, 파일을 추가하며 로그인 기능을 개발합니다.
   - 작업이 어느 정도 완료되면, 다른 작업을 할 때처럼 `add`, `commit`을 합니다.
     ```bash
     git add .
     git commit -m "Feat: 로그인 UI 구현"
     ```
   - 이제 이 브랜치를 원격 저장소(GitHub)에도 올려서 팀원들과 공유하고 백업합니다. 처음 올리는 브랜치이므로 `-u` 옵션을 사용합니다.
     ```bash
     git push -u origin feature/login
     ```

**3. (GitHub) 코드 리뷰 및 병합 (Pull Request)**
   - `feature/login` 브랜치를 `main`에 바로 합치기 전에, 다른 팀원들에게 코드 리뷰를 요청하는 것이 좋습니다. 이 과정을 **풀 리퀘스트(Pull Request, PR)**라고 합니다.
   - A는 GitHub 저장소 페이지로 가서, "Compare & pull request" 버튼을 누릅니다.
   - 변경된 내용을 설명하고, 리뷰어를 지정하여 PR을 생성합니다.
   - 팀원 B, C가 코드를 보고 "좋아요" 또는 "이 부분은 수정해주세요" 같은 의견을 남깁니다.
   - 리뷰가 끝나고 모두가 동의하면, GitHub 페이지에서 **'Merge pull request'** 버튼을 눌러 `feature/login` 브랜치의 내용을 `main` 브랜치에 안전하게 합칩니다.

**4. (A의 PC) 마무리**
   - 이제 `feature/login` 브랜치는 모든 임무를 완수했으므로 삭제해도 됩니다.
   - 먼저, 다시 `main` 브랜치로 돌아와 원격 저장소에 합쳐진 최신 내용을 받아옵니다.
     ```bash
     git switch main
     git pull origin main
     ```
   - 로컬에 남아있는 기능 브랜치를 삭제합니다.
     ```bash
     git branch -d feature/login
     ```

이러한 흐름을 통해 여러 명의 개발자가 `main` 브랜치의 안정성을 해치지 않으면서, 각자의 기능을 동시에 개발하고 안전하게 합칠 수 있습니다.

----------------------------------------------------------------------
### 6. 고급 Git 및 Git LFS 활용
----------------------------------------------------------------------

#### 가. `git lfs push --all origin`은 언제 사용하나요?

일반적인 Git LFS 사용 흐름에서는 `git lfs push --all origin` 명령을 명시적으로 실행할 필요가 없습니다. `git push` 명령이 실행될 때 Git LFS가 자동으로 필요한 LFS 객체들을 원격 저장소로 업로드합니다.

하지만 다음과 같은 **특수한 상황**에서는 이 명령이 유용하게 사용될 수 있습니다.

-   **LFS 객체가 원격에 누락되었을 때**: `git push`가 LFS 객체 업로드 실패로 거부되었을 때 (예: `(missing) ...` 오류), 해당 LFS 객체만 다시 업로드하려고 할 때 사용합니다. 이는 로컬 LFS 캐시가 손상되었거나, 이전에 업로드가 불완전하게 끝났을 때 발생할 수 있습니다.
-   **Git 기록을 재작성(rebase, filter-branch, migrate)한 후**: `git lfs migrate` 명령 등으로 저장소의 기록을 변경하여 LFS 포인터가 변경되었을 때, 모든 LFS 객체를 원격에 동기화해야 할 때 사용합니다. 이 경우, Git은 어떤 LFS 객체가 원격에 없는지 정확히 알지 못할 수 있으므로 `--all` 옵션으로 모든 LFS 객체를 다시 확인하고 푸시하도록 지시합니다.
-   **특정 LFS 객체만 강제로 푸시하고 싶을 때**: 현재 브랜치에서 참조하지 않는 LFS 객체라도 원격에 올리고 싶을 때 사용합니다. (매우 드문 경우)

#### 나. 기존 GitHub 저장소를 로컬 내용으로 완전히 덮어쓰기

GitHub 저장소의 기존 내용을 모두 지우고 로컬 PC의 프로젝트로 완전히 덮어쓰는 방법입니다. 이 작업은 원격 저장소의 기존 커밋 내역이 영구적으로 사라질 수 있으므로 **매우 신중하게 진행해야 합니다.**

**과정:**

1.  **(로컬 PC) 덮어쓰고 싶은 프로젝트 폴더로 이동합니다.**
    ```bash
    cd /path/to/your/project
    ```

2.  **(로컬 PC) 기존 Git 기록을 완전히 삭제합니다.**
    *   이 폴더에 있는 `.git` 폴더를 삭제하여 기존의 복잡한 연결고리와 이력을 모두 삭제합니다. (이전 LFS 캐시도 함께 삭제됩니다.)
    ```bash
    rm -rf .git
    ```

3.  **(로컬 PC) 새로운 Git 저장소로 초기화하고 Git LFS 설정 및 첫 커밋을 만듭니다.**
    ```bash
    git init
    git lfs install
    git lfs track "*.mp4" # LFS로 관리할 파일 종류 지정
    git lfs track "*.pptx"
    # ... 필요한 다른 LFS 추적 규칙 추가 ...

    git add .
    git commit -m "Initial project setup with Git LFS configuration"
    ```

4.  **(로컬 PC) 원격 저장소 주소를 다시 연결합니다.**
    *   `git init`을 새로 했으므로 원격 저장소 연결 정보가 사라졌습니다. 다시 연결해줍니다.
    ```bash
    git remote add origin https://github.com/내아이디/내저장소.git
    ```

5.  **(로컬 PC) 기본 브랜치 이름 설정 (선택 사항이지만 권장)**
    ```bash
    git branch -M main
    ```

6.  **(로컬 PC) Git LFS 객체 푸시 및 원격 저장소에 강제 푸시 (덮어쓰기)**
    *   **[주의!] 이 명령은 원격 저장소의 모든 기존 내용을 지우고 로컬의 내용으로 덮어씁니다.**
    *   `git lfs push --all origin`은 LFS로 관리되는 실제 대용량 파일들을 원격 LFS 서버에 업로드합니다.
    *   `git push --force -u origin main`은 로컬 `main` 브랜치의 역사를 원격 `origin/main`에 강제로 덮어쓰고, 앞으로 `git push`만 해도 되도록 연결(`-u`)합니다.
    ```bash
    git lfs push --all origin
    git push --force -u origin main
    ```

#### 다. Git LFS 관련 일반적인 오류 및 해결 방법

Git LFS 사용 시 자주 발생하는 오류와 그 해결 방법입니다.

1.  **오류: `Git LFS upload failed: (missing) <파일명>`**
    -   **원인**: Git LFS가 해당 파일의 실제 내용을 로컬 LFS 캐시에서 찾을 수 없을 때 발생합니다. `.git` 폴더를 삭제하고 `git init`을 새로 했거나, 파일이 손상되었을 때 주로 나타납니다.
    -   **해결 방법**:
        1.  **가장 중요**: 해당 대용량 파일의 **원본(실제 내용)**이 로컬 프로젝트 폴더에 있는지 확인합니다. 만약 없다면, **원본 파일을 다시 해당 위치에 복사해 넣어야 합니다.** (기존의 134B짜리 LFS 포인터 파일을 덮어쓰세요.)
        2.  원본 파일을 복사해 넣은 후, 다음 명령어를 실행하여 Git LFS가 파일을 다시 인식하고 업로드하도록 합니다.
            ```bash
            git add . # 모든 변경사항을 다시 스테이징
            git lfs push --all origin # LFS 객체들을 원격에 푸시
            # 이후 git push -u origin main 또는 git push --force -u origin main 실행
            ```
        3.  만약 위 방법으로도 해결되지 않는다면, `git lfs prune --force`로 LFS 캐시를 정리하고 다시 시도해 볼 수 있습니다.

2.  **오류: `fatal: 'origin' does not appear to be a git repository`**
    -   **원인**: Git이 `origin`이라는 이름으로 설정된 원격 저장소의 주소를 찾을 수 없거나, 해당 주소가 올바른 Git 저장소가 아닐 때 발생합니다. `.git` 폴더를 삭제하고 `git init`을 새로 했을 때 원격 저장소 연결 정보가 유실되어 나타날 수 있습니다.
    -   **해결 방법**:
        1.  현재 설정된 원격 저장소 목록을 확인합니다.
            ```bash
            git remote -v
            ```
        2.  만약 `origin`이 없거나 주소가 잘못되었다면, 올바른 원격 저장소 주소를 다시 추가합니다.
            ```bash
            git remote add origin https://github.com/내아이디/내저장소.git
            ```
        3.  만약 `origin`이 이미 있지만 주소가 잘못되었다면, 기존 `origin`을 제거하고 다시 추가합니다.
            ```bash
            git remote remove origin
            git remote add origin https://github.com/내아이디/내저장소.git
            ```

3.  **오류: `remote: error: File <파일명> is <크기> MB; this exceeds GitHub's file size limit of 100.00 MB`**
    -   **원인**: Git LFS로 추적하도록 설정하지 않은 대용량 파일을 일반 Git으로 푸시하려고 할 때 발생합니다.
    -   **해결 방법**:
        1.  해당 파일의 확장자를 Git LFS가 추적하도록 설정합니다.
            ```bash
            git lfs track "*.해당확장자"
            ```
        2.  `.gitattributes` 파일이 변경되었으므로 스테이징하고 커밋합니다.
            ```bash
            git add .gitattributes
            git commit -m "Add LFS tracking for .해당확장자"
            ```
        3.  **[중요]** 이미 커밋된 대용량 파일이라면, `git lfs migrate` 명령을 사용하여 과거 커밋의 해당 파일을 LFS 포인터로 변환해야 합니다. (이 명령은 Git 기록을 재작성하므로 신중하게 사용)
            ```bash
            git lfs migrate import --everything --include="*.해당확장자"
            # 이후 git push --force -u origin main 실행
            ```
        4.  새로 추가하는 파일이라면, 그냥 `git add .` 후 `git commit`, `git push` 하면 됩니다.

#### 라. Git Push/Pull 시 자주 발생하는 오류 및 해결 방법

Git으로 원격 저장소와 상호작용할 때 (`git push`, `git pull`) 자주 발생하는 오류와 그 해결 방법입니다.

1.  **오류: `fatal: The current branch <브랜치명> has no upstream branch.`**
    -   **원인**: 로컬 브랜치(`main` 등)가 원격 저장소의 어떤 브랜치와 연결되어 있는지 Git이 모를 때 발생합니다. 주로 `git push`를 처음 시도할 때 나타납니다.
    -   **해결 방법**:
        -   `--set-upstream` 또는 `-u` 옵션을 사용하여 로컬 브랜치를 원격 브랜치에 연결합니다.
            ```bash
            git push -u origin <로컬 브랜치명>
            # 예: git push -u origin main
            ```
        -   한번 연결하면 다음부터는 `git push`만 입력해도 됩니다.

2.  **오류: `Updates were rejected because the tip of your current branch is behind its remote counterpart.`**
    -   **원인**: 원격 저장소(GitHub)에 내가 가지고 있지 않은 새로운 커밋이 존재할 때 발생합니다. 즉, 다른 사람이 먼저 푸시했거나, 내가 다른 PC에서 작업한 내용이 원격에 반영되었을 때 내 로컬 브랜치가 최신 상태가 아니어서 푸시가 거부됩니다.
    -   **해결 방법**:
        -   먼저 원격 저장소의 최신 변경사항을 내 로컬로 가져와서 합쳐야 합니다.
            ```bash
            git pull origin <브랜치명>
            # 예: git pull origin main
            ```
        -   `git pull` 과정에서 충돌(Conflict)이 발생할 수 있으며, 이 경우 충돌을 수동으로 해결해야 합니다.
        -   `git pull --rebase`를 사용하면 내 커밋을 원격 커밋 위에 깔끔하게 다시 쌓을 수 있어 커밋 이력을 더 깨끗하게 유지할 수 있습니다. (충돌 해결 방식이 다름)

3.  **오류: `Merge conflict` (또는 `CONFLICT (content): Merge conflict in <파일명>`)**
    -   **원인**: `git pull` 또는 `git merge` 과정에서 로컬 브랜치와 합치려는 브랜치(원격 브랜치 등)에서 **같은 파일의 같은 부분을 서로 다르게 수정했을 때** 발생합니다.
    -   **해결 방법**:
        1.  `git status`를 입력하여 충돌이 발생한 파일을 확인합니다.
        2.  충돌이 발생한 파일을 텍스트 에디터로 엽니다. 파일 안에 `<<<<<<<`, `=======`, `>>>>>>>` 같은 표시로 충돌 영역이 표시되어 있습니다.
        3.  원하는 내용만 남기고 충돌 표시를 모두 제거하여 파일을 수동으로 수정합니다.
        4.  수정이 완료된 파일을 스테이징 영역에 추가합니다.
            ```bash
            git add <충돌 해결한 파일명>
            ```
        5.  모든 충돌을 해결하고 스테이징했다면, 병합 커밋을 완료합니다.
            ```bash
            git commit -m "Merge branch 'main' into feature/my-feature" # Git이 자동으로 메시지를 제안함
            ```
        6.  이후 `git push`를 다시 시도합니다.

4.  **오류: `Authentication failed for 'https://github.com/...'`**
    -   **원인**: GitHub에 접근하기 위한 사용자 이름, 비밀번호 또는 PAT(개인용 액세스 토큰)가 올바르지 않을 때 발생합니다.
    -   **해결 방법**:
        -   다시 `git push` 또는 `git pull`을 시도할 때, 사용자 이름과 비밀번호(PAT)를 정확히 입력합니다.
        -   만약 PAT를 사용한다면, PAT가 만료되었거나 권한이 부족한지 확인하고, 필요하다면 GitHub에서 새로운 PAT를 발급받아 사용합니다.
        -   Credential Helper가 잘못된 정보를 저장하고 있을 수 있으므로, 저장된 자격 증명을 삭제하고 다시 시도해 볼 수 있습니다. (운영체제별로 다름: macOS는 키체인 접근, Windows는 자격 증명 관리자)

5.  **오류: `fatal: repository '<URL>' not found`**
    -   **원인**: 원격 저장소의 URL이 잘못되었거나, 해당 이름의 저장소가 존재하지 않거나, 내가 접근할 권한이 없는 비공개 저장소일 때 발생합니다.
    -   **해결 방법**:
        1.  원격 저장소 URL이 정확한지 확인합니다. (GitHub 저장소 페이지에서 'Code' 버튼을 눌러 URL을 복사하여 비교)
        2.  `git remote -v` 명령으로 현재 설정된 원격 URL을 확인하고, 필요하다면 `git remote set-url origin <올바른 URL>` 명령으로 수정합니다.
        3.  저장소가 비공개(Private)인데 내가 해당 저장소에 대한 접근 권한이 없는지 확인합니다. (저장소 소유자에게 권한 요청)

----------------------------------------------------------------------
### 7. 알아두면 좋은 추가 정보
----------------------------------------------------------------------

#### 가. .gitignore (버전 관리에서 제외할 파일 지정하기)
- 프로젝트 폴더에 `.gitignore` 라는 이름의 파일을 만들면, 여기에 적힌 파일이나 폴더는 Git이 무시합니다.
- 개인 설정 파일, 보안 키, 컴파일된 파일, 로그 파일 등 저장소에 올릴 필요가 없거나 올리면 안 되는 것들을 지정합니다.
- 예시 `.gitignore` 파일 내용:
  ```
  # macOS 시스템 파일
  .DS_Store

  # 비밀 키나 환경 설정 파일
  .env
  secret_key.txt

  # 빌드 결과물 폴더
  /build
  /node_modules
  ```

#### 나. git status
- 현재 내 프로젝트 폴더의 상태를 보여주는 가장 중요한 명령어입니다.
- 어떤 파일이 수정되었는지, 어떤 파일이 스테이징 영역에 있는지 등을 한눈에 볼 수 있습니다.
- 작업하다가 헷갈릴 때는 언제나 `git status`를 입력해보세요.

#### 다. git pull
- 원격 저장소(GitHub)의 최신 내용을 내 로컬 저장소로 가져와 합치는 명령어입니다.
- 여러 명이 함께 작업할 때는 내가 작업한 내용을 `push` 하기 전에, 항상 `git pull`을 먼저 실행해서 다른 사람의 변경사항을 내 PC에 먼저 반영하는 것이 좋습니다. 이렇게 해야 충돌(Conflict)을 최소화할 수 있습니다.
- 혼자 작업하더라도, 다른 PC에서 작업한 내용을 현재 PC로 가져올 때 사용합니다.
